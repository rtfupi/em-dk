#!/bin/bash

##.###########################################################################.
##! Copyright (C) Марков Евгений 2022
##!
##! \file   em-dk2k-xterm
##! \author Марков Евгений <mark@gitlab.utis.lan>
##! \date   2022-08-23 10:51
##!
##! \brief  Скрипт позволяет выполнить запуск команды в XTerm.
##!         Геометрия окна может быть настроена с помощью evm-startwin.
##!         Oкно будет иметь персистентный уникальный титл. Благодаря 
##!         этому, повторный запуск скрипта переместит окно в верхний фокус
##!         текущего desktop-a.
##|
##'###########################################################################'

# double-keystroke

SN=`basename $0`

# . ${HOME}/bin/lib/em_lib_syslog.sh
# EM_LIB_SYS_LOG=yes

#logger -p local2.info -t ${SN} "><"


L_DEBUG=yes

em_lib_logger "====>" "" "" ${L_DEBUG}


##.****************************************************************************.
##| Lib: em_lib_xorg_wmctrl.sh
##|
##'****************************************************************************'

##.=======================================================================.
##! \brief Получить текущий workspace.
##!
##! \return  - stdout :
##!                 номер workspace-а (0, 1 ...).
##!          - return code :
##!                 1 - не найдена команда wmctrl.
##|
##'======================================================================='
em_lib_xorg_curent_wp () {

    type wmctrl > /dev/null 2>&1 || return 1
    wmctrl -d| grep '^[0-9]\+[ \t]\+\*'|cut -d' ' -f1
    return 0
}

export -f em_lib_xorg_curent_wp


##.=======================================================================.
##! \brief Предикат существования окна.
##!
##! \param $1 - window title (regexp для grep).
##!
##! \return  - stdout :
##!                 window title.
##!          - return code :
##!                 0 - Ok;
##!                 1 - не найдена команда wmctrl;
##!                 2 - не такого окна.
##|
##'======================================================================='
em_lib_xorg_exist_p () {

    local s
    
    type wmctrl > /dev/null 2>&1 || return 1
    s=$(wmctrl -l|awk '{print substr($0, index($0,$4))}'|grep "${1}")
    [ -z "${s}" ] && return 2
    echo "${s}"
    return 0
}

export -f em_lib_xorg_exist_p


##.=======================================================================.
##! \brief Переместить окно в текущий workspace.
##!
##! \param $1 - window title (regexp для grep).
##!
##! \return  - stdout :
##!                 номер workspace-а (0, 1 ...).
##!          - return code :
##!                 1 - не найдена команда wmctrl;
##!                 2 - не такого окна.
##|
##'======================================================================='
em_lib_xorg_mv_to_curent_wp () {

    local s
    
    type wmctrl > /dev/null 2>&1 || return 1
    s=$(wmctrl -l|awk '{print substr($0, index($0,$4))}'|grep "${1}")
    [ -z "${s}" ] && return 2
    wmctrl -t $(em_lib_xorg_curent_wp) -R "${s}"
    return 0
}

export -f em_lib_xorg_mv_to_curent_wp


##.=======================================================================.
##! \brief Получить WID окна с фокусом.
##!
##! \param $1 - формат представления WID (команда printf).
##!
##! \return  - stdout :
##!                 WID.
##!          - return code :
##!                 0 - Ok;
##!                 1 - не найдена команда xdotool.
##|
##'======================================================================='
em_lib_xorg_get_win_focus () {

    local fmt="%d"

    type xdotool > /dev/null 2>&1 || return 1
    [ -n "${1}" ] && fmt="${1}"
    printf "${fmt}" $(xdotool getwindowfocus)
    return 0
}

export -f em_lib_xorg_get_win_focus



##.****************************************************************************.
##| Local library
##|
##'****************************************************************************'

##.=======================================================================.
##! \brief Information about arguments.
##|
##'======================================================================='
help_message ()
{
    cat << EOF
Use:
  ${SN} --help|-h
  ${SN} --title|-T 'TITLE' [--regexp|-r 'REGEXP'] [--geometry|-g 'GEOM']
        [--fg 'COLOR'] [--bg 'COLOR'] [--fnt 'FONT']
        [--daemon|-d] [--no-swin] [--swin-arg 'ARG1...']
        [--cmd|-C 'CMD'] [ARG1 ARG2 ...]

Options:
  --title,-T 'TITLE'   - XTerm title;
  --regexp,-r 'REGEXP' - regexp for title search;
  --geometry,-g 'GEOM' - XTerm geometry;
  --fg 'COLOR'         - XTerm foreground color;
  --bg 'COLOR'         - XTerm background color;
  --fnt 'FONT'         - XTerm font;
  --daemon|-d          - start xterm-cmd in background;
  --no-swin            - do not use 'em-startwin'
  --swin-arg 'ARG1...' - a list arguments of 'evm-startwin';
  --cmd,-C 'CMD'       - command running in XTerm;
    ARG1 ARG2 ...      - arguments for CMD;
  --help,-h            - this message.
EOF
    return 0
}



##.=======================================================================.
##! \brief Получить geometry через e[v]m-startwin.
##!
##! \param $1     - geometry;
##! \param $2     - list other arguments.
##!
##! \return  -  stdout :
##!                 geometry.
##!          - return code :
##!                 0 - значение geometry получено успешно;
##!                 1 - отказ.
##| 
##'======================================================================='
em_fn_proc_startwin () {

    local geom="${1}"
    local o_args="${2}"
    
    if type evm-startwin > /dev/null 2>&1; then
        geom="$(evm-startwin --geometry "${geom}" ${o_args})"
        [ -z "${geom}" ] && return 1 
    fi

    echo "${geom}"
    return 0
}
export -f em_fn_proc_startwin


em_exit () {
    
    local msg="Exit ${1} Line: ${LINENO}"
    [ -n "${2}" ] && msg="${2}"
    
    em_lib_logger "${msg}" "" "" ${L_DEBUG}

    exit ${1}
}



HELP_MESS=
EM_GEOM=
EM_FG=
EM_BG=
EM_FONT=
EM_TITLE=
EM_REGEXP=

EM_NOSWIN=
EM_SWIN_ARGS="--lh 18"

EM_CMD=
EM_CMD_ARGS=
EM_F=
EM_D_PROLOG=
EM_D_EPILOG=



while [ -n "${1}" ];do
    case "${1}" in
        --cmd|-C)
            if [ -z "${EM_F}" ];then
                shift
                EM_CMD="\"${1}\""
                EM_F=yes
                shift
                continue
            fi
            ;;&
        *)
            if [ y${EM_F} = yyes ];then
                EM_CMD_ARGS="${EM_CMD_ARGS} \"${1}\""
            fi
            ;;&
        --help|-h)
            if [ -z "${EM_F}" ];then HELP_MESS=yes;fi;;
        --geometry|-g)
            if [ -z "${EM_F}" ];then shift; EM_GEOM="$1"; fi;;
        --fnt)
            if [ -z "${EM_F}" ];then shift; EM_FONT="$1"; fi;;
        --bg)
            if [ -z "${EM_F}" ];then shift; EM_BG="$1"; fi;;
        --fg)
            if [ -z "${EM_F}" ];then shift; EM_FG="$1"; fi;;
        --title|-T)
            if [ -z "${EM_F}" ];then shift; EM_TITLE="$1"; fi;;
        --regexp|-r)
            if [ -z "${EM_F}" ];then shift; EM_REGEXP="$1"; fi;;
        --swin-arg)
            if [ -z "${EM_F}" ];then shift;EM_SWIN_ARGS="${1}"; fi;;
        --daemon|-d)
            if [ -z "${EM_F}" ];then
                EM_D_PROLOG="setsid -w"
                EM_D_EPILOG="> /dev/null 2>&1 &"
            fi;;
        --no-startwin)
            if [ -z "${EM_F}" ];then EM_NOSWIN=yes;fi;;
        *)
            if [ -z "${EM_F}" ];then
                ERROR_OPTION=yes;ERROR_OPTION_LST="${ERROR_OPTION_LST} $1"
            fi
            ;;
    esac
    shift
done


if [ y$HELP_MESS == yyes ]; then help_message; exit 0; fi

if [ -z "${EM_TITLE}" ];then
    MSG="***Error: need option --title|-T."
    echo -e "\n${MSG}\n"
    help_message
    em_exit 1 "Exit 1. ${MSG}."
fi

if [ ! -z "$ERROR_OPTION" ]; then
    MSG="***Error: ${ERROR_OPTION_LST}: no such options."
    echo -e "\n${MSG}\n"
    help_message
    em_exit 1 "Exit 1. ${MSG}."
fi


REGEXP="${EM_TITLE}"
[ -n "${EM_REGEXP}" ] && REGEXP="${EM_REGEXP}"

WP="$(em_lib_xorg_curent_wp)"

WID1="$(em_lib_xorg_get_win_focus "%d")"

WID2="$(wmctrl -l -p|sed -n "s/^\([0-9xabcdef]\+\)[ \t]\+.*${REGEXP}\$/\1/gp")"
WID2=$(printf "%d" "${WID2}")
    

if [ -n "${WID2}" ]; then
    if [ "${WID1}" -eq "${WID2}" ];then

        # Если фокус на целевом xterm, то его отослать на другой десктоп.
        if [ ${WP} = 0 ];then WP=1
        else WP=0; fi

        wmctrl -i -t "${WP}" -r "${WID1}"

        em_exit 0
    fi
fi
 

if em_lib_xorg_exist_p "${REGEXP}"; then
    # переместить целевой xterm на текущий десктоп, поднять наверх,
    # установить фокус.
    em_lib_xorg_mv_to_curent_wp "${REGEXP}"
else
    # запустить целевой xterm.

    # geometry
    [ -z "${EM_GEOM}" ] && EM_GEOM="${EEM_GEOM}"
    [ -z "${EM_GEOM}" ] && EM_GEOM="=130x50"
    if [ y${EM_NOSWIN} != yyes ];then
        EM_GEOM="$(em_fn_proc_startwin "${EM_GEOM}" "${EM_SWIN_ARGS}")"
        [ ${?} -ne 0 ] && em_exit 0
    fi
    EM_GEOM="-geometry ${EM_GEOM}"

     # foreground color
    [ -z "${EM_FG}" ] && EM_FG="${EEM_FG}"
    [ -n "${EM_FG}" ] && EM_FG="-fg \"${EM_FG}\""

    # background color
    [ -z "${EM_BG}" ] && EM_BG="${EEM_BG}"
    [ -n "${EM_BG}" ] && EM_BG="-bg \"${EM_BG}\""

    # font
    [ -z "${EM_FONT}" ] && EM_FONT="${EEM_FONT}"
    [ -n "${EM_FONT}" ] && EM_FONT="-fn \"${EM_FONT}\""

    # title
    [ -n "${EM_TITLE}" ] && EM_TITLE="-T \"${EM_TITLE}\""

    # A command that runs in xterm.
    [ -n "${EM_CMD}" ] && EM_CMD="-e ${EM_CMD}"

    em_lib_logger \
        "${EM_D_PROLOG} xterm ${EM_FG} ${EM_BG} ${EM_FONT} `
                             `${EM_GEOM} ${EM_TITLE} `
                             `-xrm \"xterm*allowTitleOps: false\" `
                             `${EM_CMD} ${EM_CMD_ARGS} `
                             `${EM_D_EPILOG}" "" "" ${L_DEBUG}

    # Запретить изменение титла:
    #   -xrm "xterm*allowTitleOps: false"
    eval "${EM_D_PROLOG} xterm ${EM_FG} ${EM_BG} ${EM_FONT} `
                              `${EM_GEOM} ${EM_TITLE} `
                              `-xrm \"xterm*allowTitleOps: false\" `
                              `${EM_CMD} ${EM_CMD_ARGS} `
                              `${EM_D_EPILOG}"
fi

em_lib_logger "<====" "" "" ${L_DEBUG}

# em-dk2k-xterm --bg chartreuse4 --fg green -g 100x30 -T "123 456" -r "^123 456\$" -C mc -d

# em-dk2k-xterm --bg chartreuse4 --fg green -g 100x30 -T "em-xterm-tmux" -C "'tmux att -t EmXtermTmux || tmux new -s EmXtermTmux'"  
